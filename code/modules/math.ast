------------------------------------------------------------------
-- math.ast
--
-- this module implements the mathematical operators
-- and constants.
--
-- (c) Lutz Hamel, University of Rhode Island
------------------------------------------------------------------
-- NOTE: escaped Python code can return a value to the parent
--       Asteroid code via the __retval__ return value register.
--       For examples see code below.
--
-- NOTE: 'promote' is the type promotion table for primitive
--       builtin types which implements the type hierarchy:
--
--             integer < real < string and list
------------------------------------------------------------------


------------------------------------------------------------------
-- ARITHMETIC OPERATORS --
------------------------------------------------------------------

------------------------------------------------------------------
function add_op
------------------------------------------------------------------
with (a,b) do return escape
"
global __retval__
from asteroid_support import promote
from asteroid_support import term2string
from asteroid_state import state

val_a = state.symbol_table.lookup_sym('a')
val_b = state.symbol_table.lookup_sym('b')

type = promote(val_a[0], val_b[0])

if type in ['integer', 'real', 'list', 'boolean']:
    __retval__ = (type, val_a[1] + val_b[1])

elif type == 'string':
    __retval__ = (type, term2string(val_a) + term2string(val_b))

else:
    raise ValueError('unsupported type {} in +'.format(type))
"
end function

------------------------------------------------------------------
function subtract_op
------------------------------------------------------------------
with (a,b) do return escape
"
global __retval__
from asteroid_support import promote
from asteroid_state import state

val_a = state.symbol_table.lookup_sym('a')
val_b = state.symbol_table.lookup_sym('b')

type = promote(val_a[0], val_b[0])

if type in ['integer', 'real']:
    __retval__ = (type, val_a[1] - val_b[1])

else:
    raise ValueError('unsupported type {} in -'.format(type))
"
end function

------------------------------------------------------------------
function mult_op
------------------------------------------------------------------
with (a,b) do return escape
"
global __retval__
from asteroid_support import promote
from asteroid_state import state

val_a = state.symbol_table.lookup_sym('a')
val_b = state.symbol_table.lookup_sym('b')

type = promote(val_a[0], val_b[0])

if type in ['integer', 'real']:
    __retval__ = (type, val_a[1] * val_b[1])

else:
    raise ValueError('unsupported type in *')
"
end function

------------------------------------------------------------------
function divide_op
------------------------------------------------------------------
with (a,b) do return escape
"
global __retval__
from asteroid_support import promote
from asteroid_state import state

val_a = state.symbol_table.lookup_sym('a')
val_b = state.symbol_table.lookup_sym('b')

type = promote(val_a[0], val_b[0])

if type == 'integer':
    __retval__ = (type, int(val_a[1]) // int(val_b[1]))

elif type == 'real':
    __retval__ = ('real', float(val_a[1]) / float(val_b[1]))

else:
    raise ValueError('unsupported type in /')
"
end function

------------------------------------------------------------------
-- LOGIC OPERATORS --
------------------------------------------------------------------

------------------------------------------------------------------
function and_op
------------------------------------------------------------------
with (a,b) do return escape
"
global __retval__
from asteroid_support import map2boolean
from asteroid_state import state

b1 = map2boolean(state.symbol_table.lookup_sym('a'))
b2 = map2boolean(state.symbol_table.lookup_sym('b'))

if b1[1] == True and b2[1] == True:
   __retval__ = ('boolean', True)

else:
   __retval__ = ('boolean', False)
"
end function

------------------------------------------------------------------
function or_op
------------------------------------------------------------------
with (a,b) do return escape
"
global __retval__
from asteroid_support import map2boolean
from asteroid_state import state

b1 = map2boolean(state.symbol_table.lookup_sym('a'))
b2 = map2boolean(state.symbol_table.lookup_sym('b'))

if b1[1] == False and b2[1] == False:
   __retval__ = ('boolean', False)

else:
   __retval__ = ('boolean', True)
"
end function

------------------------------------------------------------------
-- RELATIONAL OPERATORS --
------------------------------------------------------------------

------------------------------------------------------------------
function eq_op
------------------------------------------------------------------
with (a,b) do return escape
"
global __retval__
from asteroid_support import promote
from asteroid_state import state

val_a = state.symbol_table.lookup_sym('a')
val_b = state.symbol_table.lookup_sym('b')

type = promote(val_a[0], val_b[0])

if type in ['integer', 'real', 'list', 'string']:
    __retval__ = ('boolean', val_a[1] == val_b[1])

else:
    raise ValueError('unsupported type in ==')
"
end function

------------------------------------------------------------------
function ne_op
------------------------------------------------------------------
with (a,b) do return escape
"
global __retval__
from asteroid_support import promote
from asteroid_state import state

val_a = state.symbol_table.lookup_sym('a')
val_b = state.symbol_table.lookup_sym('b')

type = promote(val_a[0], val_b[0])

if type in ['integer', 'real', 'list', 'string']:
    __retval__ = ('boolean', val_a[1] != val_b[1])

else:
    raise ValueError('unsupported type in =/=')
"
end function

------------------------------------------------------------------
function le_op
------------------------------------------------------------------
with (a,b) do return escape
"
global __retval__
from asteroid_support import promote
from asteroid_state import state

val_a = state.symbol_table.lookup_sym('a')
val_b = state.symbol_table.lookup_sym('b')

type = promote(val_a[0], val_b[0])

if type in ['integer', 'real']:
    __retval__ = ('boolean', val_a[1] <= val_b[1])

else:
    raise ValueError('unsupported type in <=')
"
end function

------------------------------------------------------------------
function lt_op
------------------------------------------------------------------
with (a,b) do return escape
"
global __retval__
from asteroid_support import promote
from asteroid_state import state

val_a = state.symbol_table.lookup_sym('a')
val_b = state.symbol_table.lookup_sym('b')

type = promote(val_a[0], val_b[0])

if type in ['integer', 'real']:
    __retval__ = ('boolean', val_a[1] < val_b[1])

else:
    raise ValueError('unsupported type in <')
"
end function

------------------------------------------------------------------
function ge_op
------------------------------------------------------------------
with (a,b) do return escape
"
global __retval__
from asteroid_support import promote
from asteroid_state import state

val_a = state.symbol_table.lookup_sym('a')
val_b = state.symbol_table.lookup_sym('b')

type = promote(val_a[0], val_b[0])

if type in ['integer', 'real']:
    __retval__ = ('boolean', val_a[1] >= val_b[1])

else:
    raise ValueError('unsupported type in >=')
"
end function

------------------------------------------------------------------
function gt_op
------------------------------------------------------------------
with (a,b) do return escape 
"
global __retval__
from asteroid_support import promote
from asteroid_state import state

val_a = state.symbol_table.lookup_sym('a')
val_b = state.symbol_table.lookup_sym('b')


type = promote(val_a[0], val_b[0])


if type in ['integer', 'real']:
    __retval__ = ('boolean', val_a[1] > val_b[1])

else:
    raise ValueError('unsupported type in >')
"
end function

------------------------------------------------------------------
-- UNARY OPS --
------------------------------------------------------------------

------------------------------------------------------------------
function uminus_op
------------------------------------------------------------------
with a do return escape
"
global __retval__
from asteroid_state import state

val_a = state.symbol_table.lookup_sym('a')

if val_a[0] in ['integer', 'real']:
    __retval__ = (val_a[0], - val_a[1])

else:
    raise ValueError('unsupported type in unary minus')
"
end function

------------------------------------------------------------------
function not_op
------------------------------------------------------------------
with a do return escape
"
global __retval__
from asteroid_support import map2boolean
from asteroid_state import state

val_a = state.symbol_table.lookup_sym('a')

bool_a = map2boolean(val_a)

if val_a[1] == False:
    __retval__ = ('boolean', True)

elif val_a[1] == True:
    __retval__ = ('boolean', False)

else:
    raise ValueError('not a boolean value in not')
"
end function
